import psycopg2
import webbrowser
from datetime import datetime, timedelta
from config import DB_CONFIG

def format_salary(salary_from, salary_to):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if salary_from and salary_to:
        return f"{salary_from:,} - {salary_to:,} —Ä—É–±."
    elif salary_from:
        return f"–æ—Ç {salary_from:,} —Ä—É–±."
    elif salary_to:
        return f"–¥–æ {salary_to:,} —Ä—É–±."
    else:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

def format_work_format(work_format, city):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã"""
    format_icons = {
        'remote': 'üè†',
        'hybrid': '‚ö°', 
        'office': 'üè¢',
        'unknown': '‚ùì'
    }
    
    icon = format_icons.get(work_format, '‚ùì')
    return f"{icon} {work_format} | üìç {city}"

def show_vacancies():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å –≥–µ–æ-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print("üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –í–ê–ö–ê–ù–°–ò–ô HH.RU")
    print("üìç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –¢—é–º–µ–Ω—å - –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç, –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ - —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∫–∞/–≥–∏–±—Ä–∏–¥")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    try:
        days = int(input("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏? (1-30): ") or "7")
        days = max(1, min(30, days))
    except:
        days = 7
    
    print("\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: automation, data_engineering, bi, python_sql, excel, all")
    category = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (Enter = –≤—Å–µ): ").strip().lower() or "all"
    
    print("\nüíº –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: remote, hybrid, office, all")
    work_format_filter = input("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã (Enter = –≤—Å–µ): ").strip().lower() or "all"
    
    try:
        min_salary = int(input("–ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞ (Enter = –ª—é–±–∞—è): ") or "0")
    except:
        min_salary = 0
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    
    query = """
        SELECT name, company, salary_from, salary_to, url, category, 
               skills, created_date, relevance_score, hh_id, work_format, city
        FROM vacancies 
        WHERE created_date >= %s
    """
    params = [datetime.now() - timedelta(days=days)]
    
    if category != 'all':
        query += " AND category = %s"
        params.append(category)
    
    if work_format_filter != 'all':
        query += " AND work_format = %s"
        params.append(work_format_filter)
    
    if min_salary > 0:
        query += " AND (salary_from >= %s OR salary_to >= %s)"
        params.extend([min_salary, min_salary])
    
    query += " ORDER BY relevance_score DESC, created_date DESC"
    
    cursor.execute(query, params)
    vacancies = cursor.fetchall()
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    print("=" * 90)
    
    if not vacancies:
        print("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vac in enumerate(vacancies, 1):
        name, company, salary_from, salary_to, url, category, skills, created, score, hh_id, work_format, city = vac
        
        salary_str = format_salary(salary_from, salary_to)
        location_str = format_work_format(work_format, city)
        
        print(f"{i}. {name}")
        print(f"   üè¢ {company} | üè∑Ô∏è {category} | ‚≠ê {score}/10")
        print(f"   üíµ {salary_str}")
        print(f"   {location_str}")
        
        if skills:
            print(f"   üõ†Ô∏è  {skills[:100]}{'...' if len(skills) > 100 else ''}")
        
        print(f"   üîó {url}")
        print(f"   üìÖ {created.strftime('%d.%m.%Y %H:%M')}")
        print("-" * 90)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            
            if choice == '0':
                break
            
            vacancy_num = int(choice)
            if 1 <= vacancy_num <= len(vacancies):
                selected_vacancy = vacancies[vacancy_num - 1]
                url = selected_vacancy[4]  # URL –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5-–π –ø–æ–∑–∏—Ü–∏–∏
                
                print(f"–û—Ç–∫—Ä—ã–≤–∞—é: {selected_vacancy[0]}")
                webbrowser.open(url)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    
    cursor.close()
    conn.close()

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º —Å –≥–µ–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cursor.execute("""
        SELECT 
            category,
            COUNT(*) as count,
            AVG(COALESCE(salary_from, salary_to)) as avg_salary
        FROM vacancies 
        WHERE created_date >= NOW() - INTERVAL '7 days'
        GROUP BY category
        ORDER BY count DESC
    """)
    
    stats = cursor.fetchall()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã
    cursor.execute("""
        SELECT 
            work_format,
            COUNT(*) as count
        FROM vacancies 
        WHERE created_date >= NOW() - INTERVAL '7 days'
        GROUP BY work_format
        ORDER BY count DESC
    """)
    
    format_stats = cursor.fetchall()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    cursor.execute("""
        SELECT 
            city,
            COUNT(*) as count
        FROM vacancies 
        WHERE created_date >= NOW() - INTERVAL '7 days'
        GROUP BY city
        ORDER BY count DESC
        LIMIT 10
    """)
    
    city_stats = cursor.fetchall()
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô:")
    print("=" * 50)
    
    total_vacancies = 0
    print("\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count, avg_salary in stats:
        total_vacancies += count
        salary_str = f"{int(avg_salary or 0):,} —Ä—É–±." if avg_salary else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        print(f"  {category:15} | {count:3} –≤–∞–∫–∞–Ω—Å–∏–π | —Å—Ä–µ–¥–Ω—è—è: {salary_str}")
    
    print(f"\nüíº –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã:")
    for work_format, count in format_stats:
        print(f"  {work_format:10} | {count:3} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    print(f"\nüìç –ü–æ –≥–æ—Ä–æ–¥–∞–º (—Ç–æ–ø-10):")
    for city, count in city_stats:
        print(f"  {city:20} | {count:3} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    print(f"\n–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_vacancies}")
    
    cursor.close()
    conn.close()

if __name__ == "__main__":
    while True:
        print("\n" + "="*50)
        print("üéØ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–ê–ö–ê–ù–°–ò–ô")
        print("1 - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π")
        print("2 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("3 - –í—ã—Ö–æ–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == '1':
            show_vacancies()
        elif choice == '2':
            show_statistics()
        elif choice == '3':
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")